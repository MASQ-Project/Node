name: ci-matrix

on:
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - master

jobs:
  format:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: Swatinem/rust-cache@v2
      - name: Format Test
        run: |
          ./ci/format.sh
        shell: bash

  lint:
    needs: format
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-12, windows-2022]
    env:
      CI_DIR: $(pwd)
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: Swatinem/rust-cache@v2
      - name: Lint automap
        run: cd $CI_DIR/automap; cargo clippy -- -D warnings
      - name: Lint node
        run: cd $CI_DIR/node; cargo clippy -- -D warnings
      - name: Lint dns_utility
        run: cd $CI_DIR/dns_utility; cargo clippy -- -D warnings
      - name: Lint masq
        run: cd $CI_DIR/masq; cargo clippy -- -D warnings
      - name: Lint masq_lib
        run: cd $CI_DIR/masq_lib; cargo clippy -- -D warnings

  unit_tests:
    needs: format
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-12, windows-2022]
    env:
      CI_DIR: $(pwd)
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: Swatinem/rust-cache@v2
      - name: unit_tests node
        run: cd $CI_DIR/node; cargo test --release --lib --no-fail-fast --features masq_lib/log_recipient_test -- --nocapture --skip _integration
      - name: unit_tests automap
        run: cd $CI_DIR/automap; cargo test -- --nocapture --skip _integration --test-threads=1
      - name: unit_tests dns_utility
        run: cd $CI_DIR/dns_utility; cargo test --release -- --nocapture --skip _integration
      - name: unit_tests masq
        run: cd $CI_DIR/masq; cargo test --release -- --nocapture --skip _integration
      - name: unit_tests masq_lib
        run: cd $CI_DIR/masq_lib; cargo test --release -- --nocapture --skip _integration --test-threads=1

  integration_tests:
    needs: format
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-12, windows-2022]
    env:
      CI_DIR: $(pwd)
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: Swatinem/rust-cache@v2
      - name: integration_tests node
        run: $CI_DIR/node/ci/integration_tests.sh
        shell: bash
      - name: integration_tests masq
        run: $CI_DIR/masq/ci/integration_tests.sh
        shell: bash
      - name: integration_tests dns_utility
        run: $CI_DIR/dns_utility/ci/integration_tests.sh
        shell: bash

  multinode_tests:
    needs: format
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: Swatinem/rust-cache@v2
      - name: Multinode Integration Tests
        run: cd multinode_integration_tests; ci/all.sh
        shell: bash

  build:
    needs:
      - lint
      - unit_tests
      - integration_tests
      - multinode_tests
    strategy:
      matrix:
        target:
          - { name: linux, os: ubuntu-22.04 }
          - { name: macos, os: macos-12 }
          - { name: windows, os: windows-2022 }
    name: Build node on ${{ matrix.target.os }}
    env:
      CI_DIR: $(pwd)
    runs-on: ${{ matrix.target.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: Swatinem/rust-cache@v2
      - name: Build masq_lib on ${{ matrix.target.os }}
        run: cd $CI_DIR/masq_lib; cargo build --release --verbose
      - name: Build automap on ${{ matrix.target.os }}
        run: cd $CI_DIR/automap; cargo build --release --verbose
      - name: Build dns_utility on ${{ matrix.target.os }}
        run: cd $CI_DIR/dns_utility; cargo build --release --verbose
      - name: Build masq on ${{ matrix.target.os }}
        run: cd $CI_DIR/masq; cargo build --release --verbose
      - name: Build node on ${{ matrix.target.os }}
        run: cd $CI_DIR/node; cargo build --all --lib --bins --release --verbose --features "masq_lib/no_test_share automap/no_test_share"
      - name: Collect results
        run: $CI_DIR/ci/collect_results.sh
        shell: bash
      - name: Publish ${{ matrix.target.os }}
        uses: actions/upload-artifact@v3
        with:
          name: Node-${{ matrix.target.name }}
          path: results

  deploy_to_s3:
    needs: build
    strategy:
      matrix:
        os: [linux, macos, windows]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/download-artifact@v3
      - name: Display structure of downloaded files
        run: ls -R
      - if: startsWith(github.head_ref, 'GH')
        name: Versioned S3 Sync
        uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --acl private --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-west-2"
          DEST_DIR: "Node/${{ github.event.workflow_run.head_branch }}/Node-${{ matrix.os }}"
          SOURCE_DIR: "Node-${{ matrix.os }}/generated/bin/"
      - if: startsWith(github.head_ref, 'v')
        name: Latest S3 Sync
        uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --acl private --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-west-2"
          DEST_DIR: "Node/latest/Node-${{ matrix.os }}"
          SOURCE_DIR: "Node-${{ matrix.os }}/generated/bin/"
      - name: Invalidate Binaries CloudFront
        uses: chetan/invalidate-cloudfront-action@v2.4
        env:
          DISTRIBUTION: ${{ secrets.DISTRIBUTION }}
          PATHS: "/Node*"
          AWS_REGION: "us-west-2"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
