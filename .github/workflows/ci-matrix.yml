name: ci-matrix

on:
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - master

jobs:
  format:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Stable with rustfmt and clippy
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.63.0
          components: rustfmt, clippy
          override: true
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/cache/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo
      - name: Format Test
        run: |
          ./ci/format.sh
        shell: bash

  multinode_tests:
    needs: format
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Stable with rustfmt and clippy
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.63.0
          components: rustfmt, clippy
          override: true
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/cache/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo
      - name: Multinode Integration Tests
        run: |
          ./ci/multinode_integration_test.sh
        shell: bash

  lint:
    needs: format
    strategy:
      fail-fast: true
      matrix:
        os: [linux, macos, windows]
    runs-on: $
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Stable with rustfmt and clippy
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.63.0
          components: rustfmt, clippy
          override: true
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/cache/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo
      - name: Lint all modules
        run: |
          ./node/ci/lint.sh
          ./multinode_integration_tests/ci/lint.sh
          ./masq_lib/ci/lint.sh
          ./masq/ci/lint.sh
          ./dns_utility/ci/lint.sh
          ./automap/ci/lint.sh
        shell: bash

  unit_tests:
    needs: format
    strategy:
      fail-fast: true
      matrix:
        os: [linux, macos, windows]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Stable with rustfmt and clippy
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.63.0
          components: rustfmt, clippy
          override: true
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/cache/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo
      - name: unit_tests all modules
        run: |
          ./node/ci/unit_tests.sh
          ./masq_lib/ci/unit_tests.sh
          ./masq/ci/unit_tests.sh
          ./dns_utility/ci/unit_tests.sh
          ./automap/ci/unit_tests.sh
        shell: bash

  integration_tests:
    needs: format
    strategy:
      fail-fast: true
      matrix:
        os: [linux, macos, windows]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Stable with rustfmt and clippy
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.63.0
          components: rustfmt, clippy
          override: true
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/cache/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo
      - name: integration_tests all modules
        run: |
          ./node/ci/integration_tests.sh
          ./masq/ci/integration_tests.sh
          ./dns_utility/ci/integration_tests.sh
        shell: bash

  build:
    needs:
      - lint
      - unit_tests
      - integration_tests
      - multinode_tests
    strategy:
      fail-fast: true
      matrix:
        target:
          - { name: linux, os: ubuntu-22.04 }
          - { name: macos, os: macos-12 }
          - { name: windows, os: windows-2022 }
    name: Build node on ${{ matrix.target.os }}
    runs-on: ${{ matrix.target.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Stable with rustfmt and clippy
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.63.0
          components: rustfmt, clippy
          override: true
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/cache/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo
      - name: Build ${{ matrix.target.os }}
        run: |
          ./node/ci/build.sh
          ./masq_lib/ci/build.sh
          ./masq/ci/build.sh
          ./dns_utility/ci/build.sh
          ./automap/ci/build.sh
          ./ci/collect_results.sh
        shell: bash
      - name: Publish ${{ matrix.target.os }}
        uses: actions/upload-artifact@v3
        with:
          name: Node-${{ matrix.target.name }}
          path: results

  deploy_to_s3:
    needs: build
    strategy:
      matrix:
        os: [linux, macos, windows]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/download-artifact@v3
      - name: Display structure of downloaded files
        run: ls -R
      - if: startsWith(github.head_ref, 'GH')
        name: Versioned S3 Sync
        uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --acl private --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-west-2"
          DEST_DIR: "Node/${{ github.event.workflow_run.head_branch }}/Node-${{ matrix.os }}"
          SOURCE_DIR: "Node-${{ matrix.os }}/generated/bin/"
      - if: startsWith(github.head_ref, 'v')
        name: Latest S3 Sync
        uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --acl private --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-west-2"
          DEST_DIR: "Node/latest/Node-${{ matrix.os }}"
          SOURCE_DIR: "Node-${{ matrix.os }}/generated/bin/"
      - name: Invalidate Binaries CloudFront
        uses: chetan/invalidate-cloudfront-action@v2.4
        env:
          DISTRIBUTION: ${{ secrets.DISTRIBUTION }}
          PATHS: "/Node*"
          AWS_REGION: "us-west-2"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
